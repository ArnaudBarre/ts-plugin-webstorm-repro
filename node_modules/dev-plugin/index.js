const {writeFileSync} = require("node:fs");
const {join, dirname} = require("node:path");

const logs = [`Start at ${new Date().toISOString()}`];
let logPath;
var log = (v) => {
  logs.push(v);
  if (logPath) writeFileSync(logPath, logs.join("\n"));
};

module.exports = ({ typescript: ts }) => {
  ts.codefix.registerCodeFix({ errorCodes: [61334], getCodeActions: () => undefined })
  const pluginModule = {
    create(info) {
      if (!logPath) {
        logPath = join(
          dirname(info.project.getProjectName()),
          "plugin-logs.txt"
        );
      }
      log(`Create ${info.project.getProjectName()} (${info.project.projectKind})`);
      const { getSemanticDiagnostics, getCodeFixesAtPosition } = info.languageService;
      info.languageService.getSemanticDiagnostics = (fileName) => {
        const program = info.languageService.getProgram();
        const sourceFile = program?.getSourceFile(fileName);
        if (!sourceFile) return;
        return [
          ...getSemanticDiagnostics(fileName),
          {
            category: ts.DiagnosticCategory.Warning,
            source: "lint",
            code: 61_333,
            messageText: `Error 61_333`,
            file: sourceFile,
            start: 0,
            length: 10,
          },
          {
            category: ts.DiagnosticCategory.Warning,
            source: "lint",
            code: 61_334,
            messageText: `Error 61_334`,
            file: sourceFile,
            start: 10,
            length: 20,
          }
        ]
      };
      info.languageService.getCodeFixesAtPosition = (...args) => {
        log(`Get codefix for error ${args[3][0]}`)
      };
      return info.languageService;
    }
  };
  return pluginModule;
};
